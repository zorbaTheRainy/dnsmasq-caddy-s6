# Define the build argument (can be basic alpine for just dnsmasq/webproc,  or also caddy-alpine; tailscale can be added as S6 docker mod)
    # Alpine docker image      ->  https://hub.docker.com/_/alpine
    # dnsmasq/webproc docker   ->  https://github.com/jpillora/docker-dnsmasq

# -------------------------------------------------------------------------------------------------
# How this works
# -------------------------------------------------------------------------------------------------
# This is a Dockerfile for dnsmasq & webporc (no S6)
# 


# -------------------------------------------------------------------------------------------------
# Stage 0: Create base image and set ENV/LABELS
# -------------------------------------------------------------------------------------------------

# set our actual BASE_IMAGE
FROM alpine:latest AS base

# passed via GitHub Action
ARG BUILD_TIME

# Add labels to the image metadata
LABEL release-date=${BUILD_TIME}
LABEL source="https://github.com/zorbaTheRainy/dnsmasq-caddy-s6"

# -------------------------------------------------------------------------------------------------
# Stage 1: Build image
# -------------------------------------------------------------------------------------------------
FROM base AS rootfs_stage

# inherent in the build system
ARG TARGETARCH
ARG TARGETVARIANT

# add any user desired packages
RUN apk update && \
    apk add --no-cache bash nano \
    ;


    # -------------------------------------------------------------------------------------------------
    # dnsmasq/webproc docker ->  https://github.com/jpillora/docker-dnsmasq
# -------------------------------------------------------------------------------------------------

# Inputs 
ARG WEBPROC_VERSION=0.4.0
LABEL WEBPROC_VERSION=${WEBPROC_VERSION}


# Pull all the files (avoids `curl`, but causes use to pull more than we need, all archs not just one)
ENV WEBPROC_URL_ROOT  https://github.com/jpillora/webproc/releases/download/v${WEBPROC_VERSION}/webproc_${WEBPROC_VERSION}
ADD ${WEBPROC_URL_ROOT}_linux_amd64.gz      /tmp/webproc_amd64.gz
ADD ${WEBPROC_URL_ROOT}_linux_arm64.gz      /tmp/webproc_arm64.gz
ADD ${WEBPROC_URL_ROOT}_linux_armv7.gz      /tmp/webproc_armv7.gz
ADD ${WEBPROC_URL_ROOT}_linux_armv6.gz      /tmp/webproc_armv6.gz

# copy over files that run scripts  NOTE:  do NOT forget to chmod 755 them in the git folder (or they won't be executable in the image)
COPY dnsmasq.conf /etc/dnsmasq.conf

# integrate the files into the file system
# fetch dnsmasq and webproc binary
RUN apk update && \
    apk --no-cache add dnsmasq-dnssec && \
    case "${TARGETARCH}" in \
        amd64)  gzip -d -c /tmp/webproc_amd64.gz > /usr/local/bin/webproc   ;; \
        arm64)  gzip -d -c /tmp/webproc_arm64.gz > /usr/local/bin/webproc   ;; \
        arm) \
            case "${TARGETVARIANT}" in \
                v6)   gzip -d -c /tmp/webproc_armv6.gz > /usr/local/bin/webproc   ;; \
                v7)   gzip -d -c /tmp/webproc_armv7.gz > /usr/local/bin/webproc   ;; \
                v8)   gzip -d -c /tmp/webproc_arm64.gz > /usr/local/bin/webproc   ;; \
                *) echo >&2 "error: unsupported architecture (${TARGETARCH}/${TARGETVARIANT})"; exit 1 ;; \
            esac;  ;; \
        *) echo >&2 "error: unsupported architecture (${TARGETARCH}/${TARGETVARIANT})"; exit 1 ;; \
    esac  && \
    rm -rf /tmp/webproc_* && \
    chmod +x /usr/local/bin/webproc && \
    mkdir -p /etc/default/ && \
    echo -e "ENABLED=1\nIGNORE_RESOLVCONF=yes" > /etc/default/dnsmasq \
    ; 

RUN if [ -f "/etc/cont-init.d/99-enable-services.sh" ]; then \
        echo 'enable_service "${ENABLE_DNSMASQ}" "dnsmasq" "DNSmasq with Webproc"' >> /etc/cont-init.d/99-enable-services.sh ; \
    fi


# Things to copy this to any Stage 2: Final image (e.g., ENV, LABEL, EXPOSE, WORKDIR, VOLUME, CMD)
EXPOSE 53 67/udp 68/udp 8080
# EXPOSE 53/udp 8080
# 53 udp/tcp DNS & DNSSEC
# 67 68 DHCP
# 8080 WebProc


# ENTRYPOINT ["webproc","--configuration-file","/etc/dnsmasq.conf","--","dnsmasq","--no-daemon"]

# -------------------------------------------------------------------------------------------------
# Stage 2: Final image
# -------------------------------------------------------------------------------------------------

# by using 'base' (which was set earlier, this image inherets any already set ENV/LABEL in Stage 0)
FROM base
# Copy the entire filesystem from the builder stage
COPY --from=rootfs_stage / /
COPY .bashrc /root/.bashrc
COPY .profile /root/.profile

ARG WEBPROC_VERSION=0.4.0
LABEL WEBPROC_VERSION=${WEBPROC_VERSION}
EXPOSE 53 67/udp 68/udp 8080

# Run the desired programs
ENTRYPOINT ["webproc","--configuration-file","/etc/dnsmasq.conf","--","dnsmasq","--no-daemon"]
